//v2: App 클래스에 옵저버 등록 기능과 실행 기능을 추가한다.

package com.eomcs.lms;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import com.eomcs.lms.context.ApplicationContextListener;
import com.eomcs.lms.domain.Board;
import com.eomcs.lms.domain.Lesson;
import com.eomcs.lms.domain.Member;
import com.eomcs.lms.handler.BoardAddCommand;
import com.eomcs.lms.handler.BoardDeleteCommand;
import com.eomcs.lms.handler.BoardDetailCommand;
import com.eomcs.lms.handler.BoardListCommand;
import com.eomcs.lms.handler.BoardUpdateCommand;
import com.eomcs.lms.handler.CalcPlusCommand;
import com.eomcs.lms.handler.Command;
import com.eomcs.lms.handler.HiCommand;
import com.eomcs.lms.handler.LessonAddCommand;
import com.eomcs.lms.handler.LessonDeleteCommand;
import com.eomcs.lms.handler.LessonDetailCommand;
import com.eomcs.lms.handler.LessonListCommand;
import com.eomcs.lms.handler.LessonUpdateCommand;
import com.eomcs.lms.handler.MemberAddCommand;
import com.eomcs.lms.handler.MemberDeleteCommand;
import com.eomcs.lms.handler.MemberDetailCommand;
import com.eomcs.lms.handler.MemberListCommand;
import com.eomcs.lms.handler.MemberUpdateCommand;
import com.eomcs.util.Input;

public class App {

  // 옵저버를 보관할 컬렉션 객체 준비
  ArrayList<ApplicationContextListener> appCtxListeners = new ArrayList<>();
  
  
  Scanner keyScan;

  // Command 객체가 사용할 Collection 준비
  ArrayList<Lesson> lessonList = new ArrayList<>();
  ArrayList<Member> memberList = new ArrayList<>();
  ArrayList<Board> boardList = new ArrayList<>();


  private void service() {

    // 애필리케이션의 서비스를 시작할 때 등록된 옵저버에게 알린다.
    for (ApplicationContextListener listener : appCtxListeners) {
      listener.contextInitialized();
    }
    
    // 이전에 저장된 애플리케이션 데이터를 로딩한다.
    loadLessonData();
    loadMemberData();
    loadBoardData();

    keyScan = new Scanner(System.in);
    //
    Deque<String> commandStack = new ArrayDeque<>();
    Queue<String> commandQueue = new LinkedList<>();

    // Input 생성자를 통해 Input이 의존하는 객체인 Scanner를 주입한다.
    Input input = new Input(keyScan);

    // Command 객체를 보관할 Map 준비
    HashMap<String, Command> commandMap = new HashMap<>();

    commandMap.put("/lesson/add", new LessonAddCommand(input, lessonList));
    commandMap.put("/lesson/delete", new LessonDeleteCommand(input, lessonList));
    commandMap.put("/lesson/detail", new LessonDetailCommand(input, lessonList));
    commandMap.put("/lesson/list", new LessonListCommand(input, lessonList));
    commandMap.put("/lesson/update", new LessonUpdateCommand(input, lessonList));

    commandMap.put("/member/add", new MemberAddCommand(input, memberList));
    commandMap.put("/member/delete", new MemberDeleteCommand(input, memberList));
    commandMap.put("/member/detail", new MemberDetailCommand(input, memberList));
    commandMap.put("/member/list", new MemberListCommand(input, memberList));
    commandMap.put("/member/update", new MemberUpdateCommand(input, memberList));


    commandMap.put("/board/add", new BoardAddCommand(input, boardList));
    commandMap.put("/board/delete", new BoardDeleteCommand(input, boardList));
    commandMap.put("/board/detail", new BoardDetailCommand(input, boardList));
    commandMap.put("/board/list", new BoardListCommand(input, boardList));
    commandMap.put("/board/update", new BoardUpdateCommand(input, boardList));

    commandMap.put("/hi", new HiCommand(input));
    commandMap.put("/calc/plus", new CalcPlusCommand(input));

    while (true) {

      String command = prompt();

      // 사용자가 아무것도 입력하지 않았으면 다시 입력 받는다.
      if (command.length() == 0)
        continue;

      commandStack.push(command); // 사용자가 입력한 명령을 보관한다.
      commandQueue.offer(command); // 사용자가 입력한 명령을 보관한다.


      // 사용자가 입력한 명령어를 처리할 Command 객체를 Map에서 꺼낸다.
      Command executor = commandMap.get(command);

      if (command.equals("quit")) {
        break;
      } else if (command.equals("history")) {
        printCommandHistory(commandStack);

      } else if (command.equals("history2")) {
        printCommandHistory(commandQueue);

      } else if (executor != null) {
        executor.execute(); // addLesson() 메서드 블록에 묶어 놓은 코드를 실행한다.

      } else {
        System.out.println("해당 명령을 지원하지 않습니다!");
      }

      System.out.println();
    } // while

    // 애플리케이션의 실행을 종료하기 전에 데이터를 저장한다.
    saveLessonData();
    saveMemberData();
    saveBoardData();
    
    // 애플리케이션의 서비스를 종료할 때 등록된 옵저버에게 알린다.
    for (ApplicationContextListener listener : appCtxListeners) {
      listener.contextDestroyed();
    }

  }
  


  private void printCommandHistory(Iterable<String> list) {
    Iterator<String> iterator = list.iterator();
    int count = 0;
    while (iterator.hasNext()) {
      System.out.println(iterator.next());
      if (++count % 5 == 0) {
        System.out.print(":");
        if (keyScan.nextLine().equalsIgnoreCase("q"))
          break;
      }
    }
  }

  private  String prompt() {
    System.out.print("명령> ");
    return keyScan.nextLine();
  }

  @SuppressWarnings("unchecked")
  private void loadLessonData() {
    // File의 정보를 준비
    File file = new File("./lesson.ser");

    // 바이트 단위로 출력된 데이터를 읽을 객체를 준비한다.
    FileInputStream in = null;
    ObjectInputStream in2 = null;

    try {
      // 파일 정보를 바탕으로 데이터를 읽어주는 객체 준비
      in = new FileInputStream(file);

      // 바이트 배열을 읽어 객체로 복원해주는 객체 준비
      in2 = new ObjectInputStream(in);
      
      lessonList = (ArrayList<Lesson>)in2.readObject();
      
    } catch (FileNotFoundException e) {
      System.out.println("읽을 파일을 찾을 수 없습니다!");

    } catch (Exception e) {
      System.out.println("파일을 읽는 중에 오류가 발생했습니다.");

    } finally {
      try {in2.close();} catch (Exception e) {}
      try {in.close();} catch (Exception e) {}
    }


  }

  private void saveLessonData() {
    // File의 정보를 준비
    File file = new File("./lesson.ser");

    // 바이트 단위로 데이터를 다루기 위해 바이트 스트림 클래스를 준비한다.
    FileOutputStream out = null;
    ObjectOutputStream out2 = null;

    try {
      // 파일 정보를 바탕으로 데이터를 출력해주는 객체 준비
      out = new FileOutputStream(file);
      
      // 객체를 통째로 바이트 배열로 변환해주는 출력 스트림 준비하기
      out2 = new ObjectOutputStream(out);

      // lessonList를 통째로 출력하기
      out2.writeObject(lessonList);
      
    } catch (FileNotFoundException e) {
      // 출력할 파일을 생성하지 못할 때
      // JVM을 멈추지 말고 간단히 오류 안내 문구를 출력한 다음에
      // 계속 실행하게 하자!
      System.out.println("파일을 생성할 수 없습니다!");

    } catch (IOException e) {
      // 파일에 데이터를 출력하다가 오류가 발생하면,
      // JVM을 멈추지 말고 간단히 오류 안내 문구를 출력한 다음에
      // 계속 실행하게 하자!
      System.out.println("파일에 데이터를 출력하는 중에 오류 발생!");
      e.printStackTrace();
      
    } finally {
      try {out2.close();} catch (Exception e) {}
      try {out.close();} catch (Exception e) {}
    }
  }



  @SuppressWarnings("unchecked")
  private void loadMemberData() {
    // File의 정보를 준비
    File file = new File("./member.ser");

    FileInputStream in = null;
    ObjectInputStream in2 = null;

    try {
      // 파일 정보를 바탕으로 데이터를 읽어주는 객체 준비
      in = new FileInputStream(file);
      in2 = new ObjectInputStream(in);
      
      memberList = (ArrayList<Member>)in2.readObject();
      
    } catch (FileNotFoundException e) {
      // 읽을 파일을 찾지 못할 때
      // JVM을 멈추지 말고 간단히 오류 안내 문구를 출력한 다음에
      // 계속 실행하게 하자!
      System.out.println("읽을 파일을 찾을 수 없습니다!");

    } catch (Exception e) {
      // FileNotFoundException 외의 다른 예외를 여기에서 처리한다.
      System.out.println("파일을 읽는 중에 오류가 발생했습니다.");

    } finally {
      try {in2.close();} catch (Exception e) {}
      try {in.close();} catch (Exception e) {}
    }


  }

  private void saveMemberData() {
    // File의 정보를 준비
    File file = new File("./member.ser");

    FileOutputStream out = null;
    ObjectOutputStream out2 = null;

    try {
      // 파일 정보를 바탕으로 데이터를 출력해주는 객체 준비
      out = new FileOutputStream(file);
      out2 = new ObjectOutputStream(out);
      out2.writeObject(memberList);

    } catch (FileNotFoundException e) {
      // 출력할 파일을 생성하지 못할 때
      // JVM을 멈추지 말고 간단히 오류 안내 문구를 출력한 다음에
      // 계속 실행하게 하자!
      System.out.println("파일을 생성할 수 없습니다!");

    } catch (IOException e) {
      // 파일에 데이터를 출력하다가 오류가 발생하면,
      // JVM을 멈추지 말고 간단히 오류 안내 문구를 출력한 다음에
      // 계속 실행하게 하자!
      System.out.println("파일에 데이터를 출력하는 중에 오류 발생!");
      e.printStackTrace();
    } finally {
      try {out2.close();} catch (Exception e) {}
      try {out.close();} catch (Exception e) {}
    }
  }



  @SuppressWarnings("unchecked")
  private void loadBoardData() {
    // File의 정보를 준비
    File file = new File("./board.ser");

    FileInputStream in = null;
    ObjectInputStream in2 = null;

    try {
      // 파일 정보를 바탕으로 데이터를 읽어주는 객체 준비
      in = new FileInputStream(file);
      in2 = new ObjectInputStream(in);

      boardList = (ArrayList<Board>)in2.readObject();

    } catch (FileNotFoundException e) {
      // 읽을 파일을 찾지 못할 때
      // JVM을 멈추지 말고 간단히 오류 안내 문구를 출력한 다음에
      // 계속 실행하게 하자!
      System.out.println("읽을 파일을 찾을 수 없습니다!");

    } catch (Exception e) {
      // FileNotFoundException 외의 다른 예외를 여기에서 처리한다.
      System.out.println("파일을 읽는 중에 오류가 발생했습니다.");

    } finally {
      try {in2.close();} catch (Exception e) {}
      try {in.close();} catch (Exception e) {}
    }


  }

  private void saveBoardData() {
    // File의 정보를 준비
    File file = new File("./board.ser");

    FileOutputStream out = null;
    ObjectOutputStream out2 = null;

    try {
      // 파일 정보를 바탕으로 데이터를 출력해주는 객체 준비
      out = new FileOutputStream(file);
      out2 = new ObjectOutputStream(out);
      out2.writeObject(boardList);
      
    } catch (FileNotFoundException e) {
      // 출력할 파일을 생성하지 못할 때
      // JVM을 멈추지 말고 간단히 오류 안내 문구를 출력한 다음에
      // 계속 실행하게 하자!
      System.out.println("파일을 생성할 수 없습니다!");

    } catch (IOException e) {
      // 파일에 데이터를 출력하다가 오류가 발생하면,
      // JVM을 멈추지 말고 간단히 오류 안내 문구를 출력한 다음에
      // 계속 실행하게 하자!
      System.out.println("파일에 데이터를 출력하는 중에 오류 발생!");
      e.printStackTrace();
    } finally {
      try {out2.close();} catch (Exception e) {}
      try {out.close();} catch (Exception e) {}
    }
  }
  
  // ApplicationContextListener 옵저버를 등록하는 메서드
  public void addApplicationContextListener(ApplicationContextListener listener) {
    this.appCtxListeners.add(listener);
  }
  
  public static void main(String[] args) {
    App app = new App();
    
    app.service();
  }
}


